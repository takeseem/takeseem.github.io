import{_ as l,c as r,a as h,b as i,d as e,f as t,r as p,o as k,e as n}from"./app-AM58Gfe9.js";const d={};function o(g,s){const a=p("RouteLink");return k(),r("div",null,[s[2]||(s[2]=h(`<h2 id="数据库操作" tabindex="-1"><a class="header-anchor" href="#数据库操作"><span>数据库操作</span></a></h2><ul><li><a href="https://www.postgresql.org/docs/current/sql-createuser.html" target="_blank" rel="noopener noreferrer">create user</a>、<a href="https://www.postgresql.org/docs/current/sql-createdatabase.html" target="_blank" rel="noopener noreferrer">create database</a>、<a href="https://www.postgresql.org/docs/current/sql-createtable.html" target="_blank" rel="noopener noreferrer">create table</a></li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> user</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> demo</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> with</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> password</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;demo&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> database</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> demo</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> with</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> owner</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;demo&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;UTF8&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> exists</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> demo (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bigint</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> generated</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> always</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> identity</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> primary key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ct </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">timestamp</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not null</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> current_timestamp,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ut </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">timestamp</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not null</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> current_timestamp,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  user_id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bigint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  foreign key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (user_id) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">references</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user (id)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://www.postgresql.org/docs/current/sql-createfunction.html" target="_blank" rel="noopener noreferrer">create function</a>、<a href="https://www.postgresql.org/docs/current/sql-createtrigger.html" target="_blank" rel="noopener noreferrer">create trigger</a>：通过触发器实现自动更新 updated_at 字段</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create or replace</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> update_ut_col</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">returns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> trigger </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> $$</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  begin</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new.* </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">is</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> distinct</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> old.* </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 无变化时什么也不做包括创建新版本数据，如果 return old 实际依然会创建新版本数据</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ut</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> current_timestamp;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$$ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">language</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> plpgsql;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> trigger</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> trigger_update_demo_ut</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> before</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> update</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> demo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> each </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">row</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> execute</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> update_ut_col();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-PARMS-STORAGE" target="_blank" rel="noopener noreferrer">STORAGE</a>PLAIN | EXTERNAL | EXTENDED | MAIN | DEFAULT <ul><li>对于可变长度的列默认：<a href="https://www.postgresql.org/docs/current/storage-toast.html#STORAGE-TOAST-ONDISK" target="_blank" rel="noopener noreferrer">EXTENDED</a> 先不压缩存在行内，再压缩尝试存在行内，依然无法放下存 <a href="https://www.postgresql.org/docs/current/storage-toast.html" target="_blank" rel="noopener noreferrer">TOAST</a></li></ul></li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查询列的存储类型</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">relname</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tab, attname </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> col, </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  CASE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> attstorage</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      WHEN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;p&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> THEN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;PLAIN&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      WHEN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;m&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> THEN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;MAIN&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      WHEN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;x&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> THEN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;EXTENDED&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      WHEN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;e&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> THEN</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;EXTERNAL&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      ELSE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;UNKNOWN&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  END</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> storage_type </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pg_attribute c </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">left outer join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pg_class t </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">on</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">attrelid</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">oid</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">attstorage</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;p&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">relname</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;ss_%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://www.postgresql.org/docs/current/datatype.html" target="_blank" rel="noopener noreferrer">数据类型</a>，重点掌握： <ul><li><a href="https://www.postgresql.org/docs/current/datatype-numeric.html" target="_blank" rel="noopener noreferrer">数值类型</a>：自增推荐用 <a href="https://www.postgresql.org/docs/current/ddl-generated-columns.html" target="_blank" rel="noopener noreferrer">generated</a></li><li><a href="https://www.postgresql.org/docs/current/datatype-character.html" target="_blank" rel="noopener noreferrer">字符串类型</a>：varchar、text 在 pg 中性能差不多，char 最慢</li><li><a href="https://www.postgresql.org/docs/current/datatype-datetime.html" target="_blank" rel="noopener noreferrer">日期/时间</a><ul><li>个人不推荐用带时区的，因为本质存储的是时间戳，在输入和输出时会根据客户端的时区转换为时间戳，而准确地时区数据是不容易获取的</li><li>时区标准：<a href="http://www.iana.org/time-zones/" target="_blank" rel="noopener noreferrer">IANA TZdata page</a>，Java：<a href="https://www.oracle.com/java/technologies/tzdata-versions.html" target="_blank" rel="noopener noreferrer">tzdata</a>、<a href="https://www.oracle.com/java/technologies/javase/tzupdater-readme.html" target="_blank" rel="noopener noreferrer">tz 更新器</a>，要定期更新才能保持正确</li></ul></li><li><a href="https://www.postgresql.org/docs/current/datatype-json.html" target="_blank" rel="noopener noreferrer">json类型</a>：jsonb 会导致存储膨胀，除非要索引，推荐用 json，甚至能用 text 代替json <ul><li>json：字符串副本、每次操作时需先解析为 json</li><li>jsonb：二进制 json，写入速度稍慢，存储膨胀，处理时无须解析，支持索引 <ul><li>每个键值对的元数据：键的长度和位置、值的类型长度和位置，所以导致体积膨胀 10% ~ 100%</li></ul></li><li>json vs jsonb：无须处理、索引时用 json，其他用 jsonb <ul><li>jsonb 保留最后的重复 key，因为是解析后的 json</li><li>json 因是字符串副本，所以可以保留顺序和重复 key</li></ul></li></ul></li><li>了解这些类型：<a href="https://www.postgresql.org/docs/current/datatype-geometric.html" target="_blank" rel="noopener noreferrer">GEO</a>、net、mac、arrays、range</li></ul></li></ul><h2 id="mysql-和-postgresql-数据更新机制" tabindex="-1"><a class="header-anchor" href="#mysql-和-postgresql-数据更新机制"><span>MySQL 和 PostgreSQL 数据更新机制</span></a></h2><ul><li>pg 使用的 MVCC 机制，每次更新都创建新版本，可以通过 <code>where col is distinct from new_value</code> 来避免不必要的更新操作</li><li>或使用触发器：<code>if new.* is not distinct from old.* then return null; end if;</code>但<code>return old</code>依然会创建新版本<code>return null</code>就不会了，但使用触发器会读取旧值，旧值如果非常大，会影响性能</li></ul><table><thead><tr><th>特性</th><th>MySQL InnoDB</th><th>PostgreSQL</th></tr></thead><tbody><tr><td>数据存储</td><td>尽量原地更新，主键更新需要迁移</td><td>标记删除旧版本，插入新版本</td></tr><tr><td>事务支持</td><td>支持，通过 Undo/Redo Log 实现</td><td>支持，通过 MVCC 实现</td></tr><tr><td>并发控制</td><td>基于 Undo Log 提供 MVCC</td><td>基于 MVCC 提供多版本支持</td></tr><tr><td>索引处理</td><td>索引涉及字段时需要更新</td><td>总是需要更新索引</td></tr><tr><td>性能</td><td>通常更快（尤其是更新小字段时）</td><td>更新更复杂，但事务隔离性更好</td></tr><tr><td>存储膨胀</td><td>通常较小</td><td>可能更大（依赖 VACUUM 清理）</td></tr></tbody></table><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2>`,12)),i("ul",null,[i("li",null,[e(a,{to:"/code/pg/pg-ssl.html"},{default:t(()=>s[0]||(s[0]=[n("PostgreSQL 配置 SSL")])),_:1})]),i("li",null,[e(a,{to:"/code/pg/pg-vs-mongo.html"},{default:t(()=>s[1]||(s[1]=[n("PostgreSQL 可以代替 MongoDB 吗？")])),_:1})])])])}const c=l(d,[["render",o],["__file","pg-start.html.vue"]]),y=JSON.parse('{"path":"/code/pg/pg-start.html","title":"PostgreSQL 入门指南","lang":"zh-CN","frontmatter":{"title":"PostgreSQL 入门指南","icon":"republican","date":"2024-11-16T19:22:57.000Z","category":["架构","postgres"],"tag":["架构","postgres"],"order":5,"star":true,"description":"数据库操作 create user、create database、create table create function、create trigger：通过触发器实现自动更新 updated_at 字段 STORAGEPLAIN | EXTERNAL | EXTENDED | MAIN | DEFAULT 对于可变长度的列默认：EXTENDED 先...","head":[["meta",{"property":"og:url","content":"https://www.takeseem.com/code/pg/pg-start.html"}],["meta",{"property":"og:site_name","content":"全球指数"}],["meta",{"property":"og:title","content":"PostgreSQL 入门指南"}],["meta",{"property":"og:description","content":"数据库操作 create user、create database、create table create function、create trigger：通过触发器实现自动更新 updated_at 字段 STORAGEPLAIN | EXTERNAL | EXTENDED | MAIN | DEFAULT 对于可变长度的列默认：EXTENDED 先..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-16T12:14:26.000Z"}],["meta",{"property":"article:tag","content":"架构"}],["meta",{"property":"article:tag","content":"postgres"}],["meta",{"property":"article:published_time","content":"2024-11-16T19:22:57.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-16T12:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PostgreSQL 入门指南\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-16T19:22:57.000Z\\",\\"dateModified\\":\\"2024-11-16T12:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全球指数\\",\\"url\\":\\"https://www.takeseem.com\\"}]}"]]},"headers":[{"level":2,"title":"数据库操作","slug":"数据库操作","link":"#数据库操作","children":[]},{"level":2,"title":"MySQL 和 PostgreSQL 数据更新机制","slug":"mysql-和-postgresql-数据更新机制","link":"#mysql-和-postgresql-数据更新机制","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[]}],"git":{"createdTime":1731759266000,"updatedTime":1731759266000,"contributors":[{"name":"takeseem","email":"takeseem@gmail.com","commits":1}]},"readingTime":{"minutes":3.01,"words":902},"filePathRelative":"code/pg/pg-start.md","localizedDate":"2024年11月16日","excerpt":"<h2>数据库操作</h2>\\n<ul>\\n<li><a href=\\"https://www.postgresql.org/docs/current/sql-createuser.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">create user</a>、<a href=\\"https://www.postgresql.org/docs/current/sql-createdatabase.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">create database</a>、<a href=\\"https://www.postgresql.org/docs/current/sql-createtable.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">create table</a></li>\\n</ul>","autoDesc":true}');export{c as comp,y as data};
