import{_ as e,c as a,a as n,o as i}from"./app-DllDb-Cu.js";const r="/assets/react-think-ui0-wgvps_ML.png",l="/assets/react-think-ui1-B-nGCnH_.png",o={};function s(c,t){return i(),a("div",null,t[0]||(t[0]=[n('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>本文是 <a href="https://zh-hans.react.dev/learn/thinking-in-react" target="_blank" rel="noopener noreferrer">React 哲学</a> 的学习整理</p></div><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><ul><li>拿到一个界面原型，怎样使用 React 来实现？</li></ul><h2 id="解题步骤" tabindex="-1"><a class="header-anchor" href="#解题步骤"><span>解题步骤</span></a></h2><ol><li>拆解 UI 为组件层级结构</li><li>用 React 构建一个静态版本</li><li>找出 state，排除那些不是 state 的 <ul><li>随时间 <strong>保持不变</strong>？——不是 state</li><li>通过 props <strong>从父组件传递</strong>？——不是 state</li><li>基于已存在于组件中的 state 或 props 进行计算？——不是 state</li></ul></li><li>放置 state 到组件层级结构中：state 放置到需要它的组件的 <strong>最近的共同父组件</strong> 中</li><li>添加反向数据流：通过事件处理器更新 state</li></ol><ul><li><p>拆解 UI 为组件层级结构，如图：拆成 5 个组件</p><p><img src="'+r+'" alt="ui" width="50%" loading="lazy"><img src="'+l+'" alt="ui" width="50%" loading="lazy"></p></li><li><p>state：根据上面的拆解步骤，确定变化的只有 <code>组件 2</code> 中的搜索框</p></li><li><p>state 放置到哪儿？用到 state 的是：<code>组件 2</code>、<code>组件 4</code>，故 state 放置到 <code>组件 1</code></p></li></ul><h2 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>demo</span></a></h2><ul><li><a href="https://www.takeseem.com/demo-react/demo/react-think" target="_blank" rel="noopener noreferrer">/demo-react/demo/react-think</a></li></ul>',8)]))}const d=e(o,[["render",s],["__file","react-think.html.vue"]]),h=JSON.parse('{"path":"/code/fe/react/react-think.html","title":"React 哲学","lang":"zh-CN","frontmatter":{"title":"React 哲学","icon":"brain","date":"2024-11-26T14:46:37.000Z","category":["react"],"tag":["react","开发日常"],"order":15,"description":"提示 本文是 React 哲学 的学习整理 问题 拿到一个界面原型，怎样使用 React 来实现？ 解题步骤 拆解 UI 为组件层级结构 用 React 构建一个静态版本 找出 state，排除那些不是 state 的 随时间 保持不变？——不是 state 通过 props 从父组件传递？——不是 state 基于已存在于组件中的 state 或 p...","head":[["meta",{"property":"og:url","content":"https://www.takeseem.com/code/fe/react/react-think.html"}],["meta",{"property":"og:site_name","content":"全球指数"}],["meta",{"property":"og:title","content":"React 哲学"}],["meta",{"property":"og:description","content":"提示 本文是 React 哲学 的学习整理 问题 拿到一个界面原型，怎样使用 React 来实现？ 解题步骤 拆解 UI 为组件层级结构 用 React 构建一个静态版本 找出 state，排除那些不是 state 的 随时间 保持不变？——不是 state 通过 props 从父组件传递？——不是 state 基于已存在于组件中的 state 或 p..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-26T13:02:59.000Z"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:tag","content":"开发日常"}],["meta",{"property":"article:published_time","content":"2024-11-26T14:46:37.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-26T13:02:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React 哲学\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-26T14:46:37.000Z\\",\\"dateModified\\":\\"2024-11-26T13:02:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全球指数\\",\\"url\\":\\"https://www.takeseem.com\\"}]}"]]},"headers":[{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"解题步骤","slug":"解题步骤","link":"#解题步骤","children":[]},{"level":2,"title":"demo","slug":"demo","link":"#demo","children":[]}],"git":{"createdTime":1732625508000,"updatedTime":1732626179000,"contributors":[{"name":"takeseem","email":"takeseem@gmail.com","commits":2}]},"readingTime":{"minutes":0.92,"words":276},"filePathRelative":"code/fe/react/react-think.md","localizedDate":"2024年11月26日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>本文是 <a href=\\"https://zh-hans.react.dev/learn/thinking-in-react\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">React 哲学</a> 的学习整理</p>\\n</div>\\n<h2>问题</h2>\\n<ul>\\n<li>拿到一个界面原型，怎样使用 React 来实现？</li>\\n</ul>\\n<h2>解题步骤</h2>\\n<ol>\\n<li>拆解 UI 为组件层级结构</li>\\n<li>用 React 构建一个静态版本</li>\\n<li>找出 state，排除那些不是 state 的\\n<ul>\\n<li>随时间 <strong>保持不变</strong>？——不是 state</li>\\n<li>通过 props <strong>从父组件传递</strong>？——不是 state</li>\\n<li>基于已存在于组件中的 state 或 props 进行计算？——不是 state</li>\\n</ul>\\n</li>\\n<li>放置 state 到组件层级结构中：state 放置到需要它的组件的 <strong>最近的共同父组件</strong> 中</li>\\n<li>添加反向数据流：通过事件处理器更新 state</li>\\n</ol>","autoDesc":true}');export{d as comp,h as data};
