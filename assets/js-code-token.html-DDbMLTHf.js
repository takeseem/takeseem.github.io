import{_ as e,c as t,a as s,o as a}from"./app-B6qzMWMO.js";const n={};function l(r,i){return a(),t("div",null,i[0]||(i[0]=[s(`<p>JavaScript 引擎执行代码时并非直接运行，而是首先将代码进行编译、解析，最终转化为一系列 token（词法单元）。理解这个过程不仅能够帮助我们优化代码，还能为解决调试难题提供宝贵思路。</p><h2 id="一、什么是-token" tabindex="-1"><a class="header-anchor" href="#一、什么是-token"><span>一、什么是 Token？</span></a></h2><p>Token 是 JavaScript 引擎将源代码分解成的最小语法元素。每个 token 都代表一个独立的语法片段。编译过程的第一步就是将源代码拆解成一系列的 token，接下来引擎会对这些 token 进行语法解析，并生成执行计划。</p><h2 id="二、token-的分类" tabindex="-1"><a class="header-anchor" href="#二、token-的分类"><span>二、Token 的分类</span></a></h2><p>在 JavaScript 中，token 大致分为以下几类：</p><ul><li>关键字：例如 if, else, function, return, let 等，构成了语言的基本控制结构。</li><li>标识符：如变量名、函数名，任何自定义的命名元素。</li><li>操作符：包括 +, -, *, /, === 等，构成运算逻辑。</li><li>字面量：如数字、字符串、布尔值、对象字面量 {} 等。</li><li>分隔符：例如 (), {}, [], ;, , 等，用于分隔代码块或表达式。</li><li>注释：如 // 单行注释和 /* */ 多行注释，虽然不会被执行，但在解析时也被视为 token。</li></ul><h2 id="三、空白字符和换行符是-token-吗" tabindex="-1"><a class="header-anchor" href="#三、空白字符和换行符是-token-吗"><span>三、空白字符和换行符是 Token 吗？</span></a></h2><blockquote><p>JavaScript 引擎在解析时，空白字符 和 换行符 通常不会直接参与语法分析，但它们作为 分隔符 和 代码结构 的一部分至关重要：</p></blockquote><ol><li>空白字符：用于分隔标识符与关键字、操作符等元素。例如，let a = 1; 中的空格用于将 let 与 a 分开。</li><li>换行符与自动分号插入（ASI）：换行符在某些情况下会触发 自动分号插入 机制，这意味着换行符可能影响语句的结束位置。</li></ol><h2 id="四、代码中的两个经典问题" tabindex="-1"><a class="header-anchor" href="#四、代码中的两个经典问题"><span>四、代码中的两个经典问题</span></a></h2><ul><li>这个函数会返回什么？</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> abc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong> 返回 undefined <strong>原因：</strong> 根据 JavaScript 的自动分号插入机制，return 之后的换行被视为语句结束，因此实际上函数在 return 后已经结束了，42 并没有被返回。</p><ul><li>在 JavaScript 中 12.toString() 会抛出 SyntaxError: Invalid or unexpected token。 <strong>原因：</strong> 单个 . 在 JavaScript 中被视为小数点，只有在加上第二个 . 后才可以当作访问属性的操作符。 <strong>解决方法：</strong> 可以通过以下几种方式避免错误：</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12.</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用两个点，第一点作为小数点</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用括号包裹数字</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">12</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 增加一个空格作为数字和.的分割</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、总结" tabindex="-1"><a class="header-anchor" href="#五、总结"><span>五、总结</span></a></h2><p>JavaScript 引擎在执行代码前会通过词法分析和语法分析，生成一系列的 token。掌握这背后的执行机制，有助于我们编写更加高效、可读的代码，同时避免常见的自动分号插入和语法解析问题。</p><p>如果这篇文章对你有所帮助，希望能点个关注或分享给更多的小伙伴。这对我来说是极大的鼓励，也能让我继续产出更多有趣的技术内容。如果觉得有价值，随手赞赏一下也是对我莫大的支持！感谢大家的阅读和支持🚀</p>`,18)]))}const p=e(n,[["render",l],["__file","js-code-token.html.vue"]]),h=JSON.parse('{"path":"/code/fe/js-code-token.html","title":"JavaScript 引擎如何“拆解”代码？深入解析编译与执行的奥秘！","lang":"zh-CN","frontmatter":{"title":"JavaScript 引擎如何“拆解”代码？深入解析编译与执行的奥秘！","shortTitle":"JS 引擎如何“拆解”代码？","icon":"t","date":"2024-09-25T18:08:32.000Z","category":["前端","js"],"tag":["js"],"order":80,"description":"JavaScript 引擎执行代码时并非直接运行，而是首先将代码进行编译、解析，最终转化为一系列 token（词法单元）。理解这个过程不仅能够帮助我们优化代码，还能为解决调试难题提供宝贵思路。 一、什么是 Token？ Token 是 JavaScript 引擎将源代码分解成的最小语法元素。每个 token 都代表一个独立的语法片段。编译过程的第一步就...","head":[["meta",{"property":"og:url","content":"https://www.takeseem.com/code/fe/js-code-token.html"}],["meta",{"property":"og:site_name","content":"全球指数"}],["meta",{"property":"og:title","content":"JavaScript 引擎如何“拆解”代码？深入解析编译与执行的奥秘！"}],["meta",{"property":"og:description","content":"JavaScript 引擎执行代码时并非直接运行，而是首先将代码进行编译、解析，最终转化为一系列 token（词法单元）。理解这个过程不仅能够帮助我们优化代码，还能为解决调试难题提供宝贵思路。 一、什么是 Token？ Token 是 JavaScript 引擎将源代码分解成的最小语法元素。每个 token 都代表一个独立的语法片段。编译过程的第一步就..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-05T02:09:58.000Z"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:published_time","content":"2024-09-25T18:08:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-05T02:09:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 引擎如何“拆解”代码？深入解析编译与执行的奥秘！\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-25T18:08:32.000Z\\",\\"dateModified\\":\\"2024-11-05T02:09:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全球指数\\",\\"url\\":\\"https://www.takeseem.com\\"}]}"]]},"headers":[{"level":2,"title":"一、什么是 Token？","slug":"一、什么是-token","link":"#一、什么是-token","children":[]},{"level":2,"title":"二、Token 的分类","slug":"二、token-的分类","link":"#二、token-的分类","children":[]},{"level":2,"title":"三、空白字符和换行符是 Token 吗？","slug":"三、空白字符和换行符是-token-吗","link":"#三、空白字符和换行符是-token-吗","children":[]},{"level":2,"title":"四、代码中的两个经典问题","slug":"四、代码中的两个经典问题","link":"#四、代码中的两个经典问题","children":[]},{"level":2,"title":"五、总结","slug":"五、总结","link":"#五、总结","children":[]}],"git":{"createdTime":1730772598000,"updatedTime":1730772598000,"contributors":[{"name":"takeseem","email":"takeseem@gmail.com","commits":1}]},"readingTime":{"minutes":2.84,"words":852},"filePathRelative":"code/fe/js-code-token.md","localizedDate":"2024年9月25日","excerpt":"<p>JavaScript 引擎执行代码时并非直接运行，而是首先将代码进行编译、解析，最终转化为一系列 token（词法单元）。理解这个过程不仅能够帮助我们优化代码，还能为解决调试难题提供宝贵思路。</p>\\n<h2>一、什么是 Token？</h2>\\n<p>Token 是 JavaScript 引擎将源代码分解成的最小语法元素。每个 token 都代表一个独立的语法片段。编译过程的第一步就是将源代码拆解成一系列的 token，接下来引擎会对这些 token 进行语法解析，并生成执行计划。</p>\\n<h2>二、Token 的分类</h2>\\n<p>在 JavaScript 中，token 大致分为以下几类：</p>","autoDesc":true}');export{p as comp,h as data};
