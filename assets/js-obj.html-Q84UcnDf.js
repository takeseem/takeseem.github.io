import{_ as e,c as t,a,o as l}from"./app-BKeDH2Tn.js";const s={};function r(n,i){return l(),t("div",null,i[0]||(i[0]=[a(`<p>JavaScript 中的对象究竟是什么？它不仅是键值对的集合，还是支撑整个语言运行的核心之一。无论是小白还是有经验的开发者，掌握 JavaScript 对象都是提升技能的关键。</p><p>在这篇文章中，我将带你深入探索 JavaScript 对象的属性、原型机制，甚至是 new 操作符背后的秘密。学习这些内容后，你不仅能更轻松地写出高效的代码，还能更好地理解 JavaScript 是如何工作的。</p><h2 id="一、对象属性的秘密" tabindex="-1"><a class="header-anchor" href="#一、对象属性的秘密"><span>一、对象属性的秘密</span></a></h2><p>JavaScript 对象的属性分为两类：数据属性 和 访问器属性。</p><ol><li>数据属性 每个数据属性都有4个重要特性：</li></ol><ul><li>value：存储的值，简单理解就是你为属性赋的具体值。</li><li>writable：控制属性值是否可以被修改。</li><li>enumerable：决定这个属性能否被 for...in 或 Object.keys() 枚举出来。</li><li>configurable：这个属性是否可以被删除或修改（除了 writable ）。</li></ul><ol start="2"><li>访问器属性 访问器属性不直接存储值，而是通过 getter 和 setter 控制数据：</li></ol><ul><li>get：当读取属性时，触发此函数。</li><li>set：当设置属性时，触发此函数。</li><li>enumerable 和 configurable 与数据属性类似。</li></ul><p>你可以通过 Object.defineProperty() 动态定义访问器属性，让对象变得更加灵活。</p><h2 id="二、原型与原型链" tabindex="-1"><a class="header-anchor" href="#二、原型与原型链"><span>二、原型与原型链</span></a></h2><p>JavaScript 的对象是基于原型继承的。每个对象都有一个隐藏的内部属性 [[Prototype]]，指向它的原型对象。当你访问一个属性时，浏览器会先在对象本身查找，找不到的话，就会沿着原型链一直向上查找，直到找到为止。</p><p>了解原型链可以帮助你理解 JavaScript 的继承机制，让你写出更具扩展性和效率的代码。</p><p>实用技巧：</p><ul><li>使用 Object.create(proto) 创建一个指定原型的对象。</li><li>Object.getPrototypeOf(obj) 可以获取对象的原型。</li><li>Object.setPrototypeOf(obj, proto) 设置对象的原型为指定的 proto。</li></ul><h2 id="三、创建对象的三种方式" tabindex="-1"><a class="header-anchor" href="#三、创建对象的三种方式"><span>三、创建对象的三种方式</span></a></h2><ul><li>字面量创建：let obj = {};</li><li>构造函数创建：let obj = new Object();</li><li>Object.create()：指定原型对象创建新的对象。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> prototypeObj</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> };</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> obj</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">prototypeObj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这些方法，你可以根据具体需求灵活创建 JavaScript 对象。</p><h2 id="四、new-操作符的幕后工作" tabindex="-1"><a class="header-anchor" href="#四、new-操作符的幕后工作"><span>四、new 操作符的幕后工作</span></a></h2><p>当你使用 new 操作符创建对象时，背后其实发生了很多神秘的事情：</p><ol><li>创建一个新的空对象。</li><li>将构造函数的 prototype 赋值给新对象的 <strong>proto</strong>。</li><li>将构造函数中的 this 绑定到新对象。</li><li>执行构造函数的代码。</li><li>如果构造函数没有返回值，new 将自动返回新创建的对象。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过这篇文章，我们全面学习了 JavaScript 对象的属性类型、原型机制和 new 操作符的背后执行流程。掌握这些知识，不仅能让你的代码更加简洁高效，还能让你深入理解 JavaScript 的工作原理。</p><p>如果你觉得这篇文章有帮助，别忘了点赞和分享，帮助更多人轻松掌握 JavaScript 对象！🚀</p><h3 id="我的收获" tabindex="-1"><a class="header-anchor" href="#我的收获"><span>我的收获：</span></a></h3><ul><li><strong>发现了数据属性的4个特性</strong>：以前没注意到属性还有这些隐藏的细节！</li><li><strong>第一次了解访问器属性</strong>：原来属性也能这么“智能”。</li><li><strong>理清了对象的继承机制</strong>：终于搞明白原型链是怎么回事了！</li><li><strong>弄懂了 new 操作符的整个执行过程</strong>：从创建到返回，一步步揭秘。</li></ul>`,26)]))}const o=e(s,[["render",r],["__file","js-obj.html.vue"]]),h=JSON.parse('{"path":"/code/fe/js-obj.html","title":"彻底搞懂 JavaScript 对象：从基础到进阶，带你一次掌握！","lang":"zh-CN","frontmatter":{"title":"彻底搞懂 JavaScript 对象：从基础到进阶，带你一次掌握！","shortTitle":"彻底搞懂 JavaScript 对象","icon":"o","date":"2024-09-23T11:37:32.000Z","category":["前端","js"],"tag":["js"],"order":20,"description":"JavaScript 中的对象究竟是什么？它不仅是键值对的集合，还是支撑整个语言运行的核心之一。无论是小白还是有经验的开发者，掌握 JavaScript 对象都是提升技能的关键。 在这篇文章中，我将带你深入探索 JavaScript 对象的属性、原型机制，甚至是 new 操作符背后的秘密。学习这些内容后，你不仅能更轻松地写出高效的代码，还能更好地理解 ...","head":[["meta",{"property":"og:url","content":"https://www.takeseem.com/code/fe/js-obj.html"}],["meta",{"property":"og:site_name","content":"全球指数"}],["meta",{"property":"og:title","content":"彻底搞懂 JavaScript 对象：从基础到进阶，带你一次掌握！"}],["meta",{"property":"og:description","content":"JavaScript 中的对象究竟是什么？它不仅是键值对的集合，还是支撑整个语言运行的核心之一。无论是小白还是有经验的开发者，掌握 JavaScript 对象都是提升技能的关键。 在这篇文章中，我将带你深入探索 JavaScript 对象的属性、原型机制，甚至是 new 操作符背后的秘密。学习这些内容后，你不仅能更轻松地写出高效的代码，还能更好地理解 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-05T02:09:58.000Z"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:published_time","content":"2024-09-23T11:37:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-05T02:09:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"彻底搞懂 JavaScript 对象：从基础到进阶，带你一次掌握！\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-23T11:37:32.000Z\\",\\"dateModified\\":\\"2024-11-05T02:09:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全球指数\\",\\"url\\":\\"https://www.takeseem.com\\"}]}"]]},"headers":[{"level":2,"title":"一、对象属性的秘密","slug":"一、对象属性的秘密","link":"#一、对象属性的秘密","children":[]},{"level":2,"title":"二、原型与原型链","slug":"二、原型与原型链","link":"#二、原型与原型链","children":[]},{"level":2,"title":"三、创建对象的三种方式","slug":"三、创建对象的三种方式","link":"#三、创建对象的三种方式","children":[]},{"level":2,"title":"四、new 操作符的幕后工作","slug":"四、new-操作符的幕后工作","link":"#四、new-操作符的幕后工作","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"我的收获：","slug":"我的收获","link":"#我的收获","children":[]}]}],"git":{"createdTime":1730721795000,"updatedTime":1730772598000,"contributors":[{"name":"takeseem","email":"takeseem@gmail.com","commits":2}]},"readingTime":{"minutes":3.12,"words":937},"filePathRelative":"code/fe/js-obj.md","localizedDate":"2024年9月23日","excerpt":"<p>JavaScript 中的对象究竟是什么？它不仅是键值对的集合，还是支撑整个语言运行的核心之一。无论是小白还是有经验的开发者，掌握 JavaScript 对象都是提升技能的关键。</p>\\n<p>在这篇文章中，我将带你深入探索 JavaScript 对象的属性、原型机制，甚至是 new 操作符背后的秘密。学习这些内容后，你不仅能更轻松地写出高效的代码，还能更好地理解 JavaScript 是如何工作的。</p>\\n<h2>一、对象属性的秘密</h2>\\n<p>JavaScript 对象的属性分为两类：数据属性 和 访问器属性。</p>\\n<ol>\\n<li>数据属性\\n每个数据属性都有4个重要特性：</li>\\n</ol>","autoDesc":true}');export{o as comp,h as data};
