import{_ as e,c as i,a,o as l}from"./app-Dz1jDlwy.js";const o={};function r(c,t){return l(),i("div",null,t[0]||(t[0]=[a('<p>JavaScript 是一门灵活的语言，而对象无处不在。那么，JavaScript 中的对象到底有哪些分类？今天，我们将深入剖析宿主对象和内置对象，帮助你全面掌握它们的区别与应用场景。</p><h2 id="一、宿主对象-host-objects" tabindex="-1"><a class="header-anchor" href="#一、宿主对象-host-objects"><span>一、宿主对象（Host Objects）</span></a></h2><p>宿主对象是由 JavaScript 运行环境提供的。根据不同的环境，宿主对象会有所不同。</p><ol><li>浏览器环境中的宿主对象</li></ol><ul><li>window：浏览器的全局对象，所有全局变量和函数都挂在它上面。</li><li>document：负责 DOM 操作，帮助你操作网页结构。</li><li>console：调试神器，用于输出日志信息。</li><li>XMLHttpRequest：早期用于发起 HTTP 请求的 API，如今广泛使用 fetch 替代。</li></ul><ol start="2"><li>Node.js 环境中的宿主对象</li></ol><ul><li>fs：文件系统模块，允许你读写文件。</li><li>http：HTTP 模块，用于构建 HTTP 服务。</li><li>process：提供与当前 Node.js 进程的交互信息。 简单来说，宿主对象取决于你代码运行的环境，不同环境下提供的 API 和工具有所不同。</li></ul><h2 id="二、内置对象-built-in-objects" tabindex="-1"><a class="header-anchor" href="#二、内置对象-built-in-objects"><span>二、内置对象（Built-in Objects）</span></a></h2><p><strong>内置对象是</strong> JavaScript 本身提供的，运行时自动创建，所有 JavaScript 环境都支持。</p><ol><li>固有对象（Intrinsic Objects） 固有对象是 JavaScript 语言的一部分，由标准规定，并在运行时自动创建。</li></ol><ul><li>Object：所有对象的基类，几乎所有 JavaScript 对象都继承自它。</li><li>Function：所有函数的基类。</li><li>Array：常用的数据结构，帮助你处理列表或数组。</li><li>Date：日期和时间处理神器。 这些对象都是由语言标准规定的，并在代码执行前就已经准备好，随时可以使用。</li></ul><ol start="2"><li>原生对象（Native Objects） 原生对象是通过 JavaScript 内置的构造器函数或特殊语法生成的对象，例如：</li></ol><ul><li>Array：用来创建数组的对象。</li></ul><blockquote><p>let arr = new Array(); // 或者 let arr = [];</p></blockquote><ul><li>RegExp：正则表达式对象，帮助你进行复杂的模式匹配。</li></ul><blockquote><p>let regex = new RegExp(&#39;abc&#39;); 原生对象可以通过简单的语法或构造函数来实例化，非常常见于日常开发中。</p></blockquote><h2 id="三、深入了解内置对象标准" tabindex="-1"><a class="header-anchor" href="#三、深入了解内置对象标准"><span>三、深入了解内置对象标准</span></a></h2><p>如果你对内置对象的标准定义感兴趣，可以参考 <a href="https://262.ecma-international.org/9.0/index.html#sec-well-known-intrinsic-objects" target="_blank" rel="noopener noreferrer">ECMAScript 标准</a>，这里列出了所有的固有对象和原生对象，帮助你进一步理解它们的细节和用法。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>掌握 JavaScript 中的对象分类，有助于你更高效地使用 API 和库，也能让你在不同环境下如鱼得水。宿主对象提供了与环境相关的工具，而内置对象则是 JavaScript 自带的“百宝箱”。无论是在浏览器还是 Node.js 环境下，理解这些对象的作用和差异，能让你写出更加健壮和高效的代码。</p><p>如果你觉得这篇文章对你有帮助，别忘了点赞、分享，让更多人掌握 JavaScript 对象的奥秘！🌟</p>',21)]))}const s=e(o,[["render",r],["__file","js-obj-kind.html.vue"]]),p=JSON.parse('{"path":"/code/fe/js-obj-kind.html","title":"深入解析 JavaScript 对象分类：宿主对象 vs 内置对象，区别到底在哪？","lang":"zh-CN","frontmatter":{"title":"深入解析 JavaScript 对象分类：宿主对象 vs 内置对象，区别到底在哪？","shortTitle":"深入解析 JavaScript 对象分类","icon":"k","date":"2024-09-23T15:00:32.000Z","category":["前端","js"],"tag":["js"],"order":30,"description":"JavaScript 是一门灵活的语言，而对象无处不在。那么，JavaScript 中的对象到底有哪些分类？今天，我们将深入剖析宿主对象和内置对象，帮助你全面掌握它们的区别与应用场景。 一、宿主对象（Host Objects） 宿主对象是由 JavaScript 运行环境提供的。根据不同的环境，宿主对象会有所不同。 浏览器环境中的宿主对象 window...","head":[["meta",{"property":"og:url","content":"https://www.takeseem.com/code/fe/js-obj-kind.html"}],["meta",{"property":"og:site_name","content":"全球指数"}],["meta",{"property":"og:title","content":"深入解析 JavaScript 对象分类：宿主对象 vs 内置对象，区别到底在哪？"}],["meta",{"property":"og:description","content":"JavaScript 是一门灵活的语言，而对象无处不在。那么，JavaScript 中的对象到底有哪些分类？今天，我们将深入剖析宿主对象和内置对象，帮助你全面掌握它们的区别与应用场景。 一、宿主对象（Host Objects） 宿主对象是由 JavaScript 运行环境提供的。根据不同的环境，宿主对象会有所不同。 浏览器环境中的宿主对象 window..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-05T02:09:58.000Z"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:published_time","content":"2024-09-23T15:00:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-05T02:09:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深入解析 JavaScript 对象分类：宿主对象 vs 内置对象，区别到底在哪？\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-23T15:00:32.000Z\\",\\"dateModified\\":\\"2024-11-05T02:09:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全球指数\\",\\"url\\":\\"https://www.takeseem.com\\"}]}"]]},"headers":[{"level":2,"title":"一、宿主对象（Host Objects）","slug":"一、宿主对象-host-objects","link":"#一、宿主对象-host-objects","children":[]},{"level":2,"title":"二、内置对象（Built-in Objects）","slug":"二、内置对象-built-in-objects","link":"#二、内置对象-built-in-objects","children":[]},{"level":2,"title":"三、深入了解内置对象标准","slug":"三、深入了解内置对象标准","link":"#三、深入了解内置对象标准","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1730721795000,"updatedTime":1730772598000,"contributors":[{"name":"takeseem","email":"takeseem@gmail.com","commits":2}]},"readingTime":{"minutes":2.68,"words":805},"filePathRelative":"code/fe/js-obj-kind.md","localizedDate":"2024年9月23日","excerpt":"<p>JavaScript 是一门灵活的语言，而对象无处不在。那么，JavaScript 中的对象到底有哪些分类？今天，我们将深入剖析宿主对象和内置对象，帮助你全面掌握它们的区别与应用场景。</p>\\n<h2>一、宿主对象（Host Objects）</h2>\\n<p>宿主对象是由 JavaScript 运行环境提供的。根据不同的环境，宿主对象会有所不同。</p>\\n<ol>\\n<li>浏览器环境中的宿主对象</li>\\n</ol>\\n<ul>\\n<li>window：浏览器的全局对象，所有全局变量和函数都挂在它上面。</li>\\n<li>document：负责 DOM 操作，帮助你操作网页结构。</li>\\n<li>console：调试神器，用于输出日志信息。</li>\\n<li>XMLHttpRequest：早期用于发起 HTTP 请求的 API，如今广泛使用 fetch 替代。</li>\\n</ul>","autoDesc":true}');export{s as comp,p as data};
