import{_ as l,c as t,a as i,o as a}from"./app-hZMF7EUS.js";const o={};function r(n,e){return a(),t("div",null,e[0]||(e[0]=[i('<p>JavaScript 有 7 种数据类型：undefined、null、Boolean、String、Number、Symbol 和 Object。每一种类型都有其独特的特点和使用场景。通过深入学习这些类型，我对以下几点有了更深刻的理解：</p><h2 id="学习收获" tabindex="-1"><a class="header-anchor" href="#学习收获"><span>学习收获</span></a></h2><ul><li>String 编码与 Unicode 字符的关系</li></ul><blockquote><p>理解了 String 的编码和方法都是基于 UTF-16 码点，这也让我更清楚地掌握了码点和 Unicode 字符之间的区别。</p></blockquote><ul><li>Number 的特殊处理</li></ul><blockquote><p>了解了 Number 在除零时处理 +0 和 -0 时的不同表现，并学会了如何使用 Number.EPSILON 进行精确的浮点数比较。</p></blockquote><ul><li>Symbol 的认知拓展</li></ul><blockquote><p>Symbol 类型带来了全新的视角，尤其是在对象属性键的应用上。</p></blockquote><ul><li>Object 和原型链深入理解了 JavaScript 的原型链机制以及对象的继承结构。</li></ul><h2 id="_7-种-javascript-类型详解" tabindex="-1"><a class="header-anchor" href="#_7-种-javascript-类型详解"><span>7 种 JavaScript 类型详解</span></a></h2><ol><li>undefined</li></ol><ul><li>当一个变量被声明但未赋值时，其默认值是 undefined。</li><li>undefined 也是一个全局对象的属性，可以通过 window.undefined 访问。</li></ul><ol start="2"><li>null</li></ol><ul><li>null 是 JavaScript 的一个关键字，语义表示“空值”。</li><li>通常用于显式赋值，表示“无”或“空对象”。</li></ul><ol start="3"><li>Boolean</li></ol><ul><li>只有两个值：true 和 false，用于表示布尔状态。</li></ul><ol start="4"><li>String</li></ol><ul><li>String 是不可变的文本序列，基于 UTF-16 编码。</li><li>一个 Unicode 字符可能由多个 UTF-16 码点（称为“代理对”）构成，比如 emoji 表情符号。</li><li>JavaScript 中的字符串操作方法都是基于 UTF-16 码点。例如，length 返回的是 UTF-16 码点的数量，而不是实际字符的数量。比如：&quot;a👄️b&quot;.length 的结果是 5。</li><li>可以通过 Array.from(str) 或 for (let ch of str) 来正确遍历包含代理对的字符串。</li></ul><ol start="5"><li>Number</li></ol><ul><li>JavaScript 中的数字类型既可以表示整数也可以表示浮点数。</li><li>特殊值包括： <ul><li>NaN（Not-a-Number）：表示无效的数字运算结果，NaN 和任何值比较，包括自己，都是 false。</li><li>Infinity 和 -Infinity：表示正无穷和负无穷，通常在除以零或数值过大时产生。</li><li>+0 和 -0：基于 IEEE 754 浮点数标准，+0 和 -0 是不同的值，虽然通常它们的表现相同，但在某些运算中会有所区别，比如：1 / -0 === -Infinity。可以使用 Object.is(0, -0) 来区分 0 和 -0。</li></ul></li><li>精度问题： <ul><li>JavaScript 中能精确表示的整数范围是 -0x1fffffffffffff 到 0x1fffffffffffff 之间的整数。</li><li>由于浮点数的精度问题，像 0.1 + 0.2 === 0.3 这样的比较会返回 false，解决方案是使用 Number.EPSILON 进行精确比较：Math.abs(0.1 + 0.2 - 0.3) &lt;= Number.EPSILON。</li></ul></li></ul><ol start="6"><li>Symbol</li></ol><ul><li>Symbol 是 JavaScript 的一种原始数据类型，具有不可变和唯一性。</li><li>Symbol 可以用作对象的非字符串键，不会被 for...in 或 Object.keys() 枚举出来，也不会与其他属性冲突。</li><li>可以使用 Symbol.for(key) 创建全局共享的 Symbol。</li><li>Symbol 无法隐式转换为字符串，但可以使用 String(symbol) 获取其描述。</li></ul><ol start="7"><li>Object</li></ol><ul><li>Object 是 JavaScript 的引用类型，表示键值对的集合，键可以是字符串或 Symbol。</li><li>可以动态地添加或删除属性。</li><li>原型链与继承：JavaScript 中的对象可以继承其他对象的属性和方法。每个对象都有一个内部链接指向另一个对象（称为原型），当访问某个属性或方法时，如果在对象本身找不到，就会沿着原型链向上查找。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过对这些基本类型的重新梳理和深入理解，我对 JavaScript 的基础有了更深刻的认知，也希望这些内容能帮助更多的开发者加深对 JavaScript 类型的理解。</p>',26)]))}const p=l(o,[["render",r],["__file","js-7type.html.vue"]]),u=JSON.parse('{"path":"/code/fe/js-7type.html","title":"JavaScript 的 7 种类型","lang":"zh-CN","frontmatter":{"title":"JavaScript 的 7 种类型","icon":"t","date":"2024-09-22T16:47:32.000Z","category":["前端","js"],"tag":["js"],"order":10,"description":"JavaScript 有 7 种数据类型：undefined、null、Boolean、String、Number、Symbol 和 Object。每一种类型都有其独特的特点和使用场景。通过深入学习这些类型，我对以下几点有了更深刻的理解： 学习收获 String 编码与 Unicode 字符的关系 理解了 String 的编码和方法都是基于 UTF-1...","head":[["meta",{"property":"og:url","content":"https://www.takeseem.com/code/fe/js-7type.html"}],["meta",{"property":"og:site_name","content":"全球指数"}],["meta",{"property":"og:title","content":"JavaScript 的 7 种类型"}],["meta",{"property":"og:description","content":"JavaScript 有 7 种数据类型：undefined、null、Boolean、String、Number、Symbol 和 Object。每一种类型都有其独特的特点和使用场景。通过深入学习这些类型，我对以下几点有了更深刻的理解： 学习收获 String 编码与 Unicode 字符的关系 理解了 String 的编码和方法都是基于 UTF-1..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-05T02:09:58.000Z"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:published_time","content":"2024-09-22T16:47:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-05T02:09:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript 的 7 种类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-22T16:47:32.000Z\\",\\"dateModified\\":\\"2024-11-05T02:09:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全球指数\\",\\"url\\":\\"https://www.takeseem.com\\"}]}"]]},"headers":[{"level":2,"title":"学习收获","slug":"学习收获","link":"#学习收获","children":[]},{"level":2,"title":"7 种 JavaScript 类型详解","slug":"_7-种-javascript-类型详解","link":"#_7-种-javascript-类型详解","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1730711678000,"updatedTime":1730772598000,"contributors":[{"name":"takeseem","email":"takeseem@gmail.com","commits":3}]},"readingTime":{"minutes":3.14,"words":942},"filePathRelative":"code/fe/js-7type.md","localizedDate":"2024年9月22日","excerpt":"<p>JavaScript 有 7 种数据类型：undefined、null、Boolean、String、Number、Symbol 和 Object。每一种类型都有其独特的特点和使用场景。通过深入学习这些类型，我对以下几点有了更深刻的理解：</p>\\n<h2>学习收获</h2>\\n<ul>\\n<li>String 编码与 Unicode 字符的关系</li>\\n</ul>\\n<blockquote>\\n<p>理解了 String 的编码和方法都是基于 UTF-16 码点，这也让我更清楚地掌握了码点和 Unicode 字符之间的区别。</p>\\n</blockquote>\\n<ul>\\n<li>Number 的特殊处理</li>\\n</ul>","autoDesc":true}');export{p as comp,u as data};
