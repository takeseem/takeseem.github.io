import{_ as s,c as a,a as e,o as n}from"./app-B88TDsre.js";const l={};function t(r,i){return n(),a("div",null,i[0]||(i[0]=[e(`<p>JavaScript 的语句执行机制背后隐藏着一些复杂的规则，了解这些机制不仅能帮助你更好地调试代码，还能让你深入理解引擎的工作方式。在这篇文章中，我们将详细揭开 JavaScript 语句执行的神秘面纱，带你彻底搞懂其中的执行逻辑。</p><h2 id="一、什么是-completion-record" tabindex="-1"><a class="header-anchor" href="#一、什么是-completion-record"><span>一、什么是 Completion Record？</span></a></h2><p>当 JavaScript 引擎执行每一条语句时，都会生成一个Completion Record，这个记录类似于一份“执行报告”，告诉引擎语句执行的结果，以便决定下一步的动作。Completion Record 包含三个主要属性：</p><ol><li>[[type]]：执行结果的类型</li></ol><blockquote><p>这是 Completion Record 的核心，决定了当前语句执行的状态，有五种可能的值：</p></blockquote><ul><li>normal：表示语句正常执行，没有异常。</li><li>break：表示遇到 break 语句，跳出当前代码块或循环。</li><li>continue：表示遇到 continue 语句，跳过本次循环，继续下一次循环。</li><li>return：表示遇到 return 语句，结束函数执行并返回指定值。</li><li>throw：表示遇到 throw 语句，抛出一个异常，进入异常处理流程。</li></ul><ol start="2"><li>[[value]]：语句的返回值</li></ol><blockquote><p>每条语句都可能有返回值，例如赋值语句、表达式的结果。[[value]] 属性就是用来记录语句的返回值。如果语句没有返回值，[[value]] 将是 undefined。有趣的是，Chrome 控制台中显示的正是语句执行后的 [[value]] 值。</p></blockquote><ol start="3"><li>[[target]]：语句的目标</li></ol><blockquote><p>[[target]] 用于指示一些语句的目标对象，尤其是 break 和 continue 语句。它可以指向某个特定的标签或者循环结构，从而告诉引擎跳转到哪里。</p></blockquote><h2 id="二、completion-record-如何影响代码执行" tabindex="-1"><a class="header-anchor" href="#二、completion-record-如何影响代码执行"><span>二、Completion Record 如何影响代码执行？</span></a></h2><p>JavaScript 引擎通过传播 Completion Record 来控制整个代码的执行流向。不同的 Completion Record 类型会触发不同的操作，例如遇到 return，函数会立刻结束，返回指定的值；遇到 throw，程序将进入异常处理流程。这种机制为代码执行提供了灵活性，但同时也带来了某些不易察觉的复杂性。</p><h2 id="三、函数中的奇妙场景" tabindex="-1"><a class="header-anchor" href="#三、函数中的奇妙场景"><span>三、函数中的奇妙场景</span></a></h2><p>在实际编程中，try-catch-finally 结构是处理异常的重要手段。但它与函数返回值的交互机制却常常出乎意料。让我们通过几个有趣的问题来探索 Completion Record 在这些场景中的应用。</p><h3 id="问题一-如果-try-块正常执行-return-1-finally-块中执行-return-2-那么函数返回的值是什么" tabindex="-1"><a class="header-anchor" href="#问题一-如果-try-块正常执行-return-1-finally-块中执行-return-2-那么函数返回的值是什么"><span>问题一：如果 try 块正常执行 return 1，finally 块中执行 return 2，那么函数返回的值是什么？</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出是什么？</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong> 函数最终会返回 2。虽然 try 块中已经有了 return 1，但 finally 块中的 return 会覆盖 try 中的返回值。</p><h3 id="问题二-如果-finally-块中抛出异常-函数的返回结果是什么" tabindex="-1"><a class="header-anchor" href="#问题二-如果-finally-块中抛出异常-函数的返回结果是什么"><span>问题二：如果 finally 块中抛出异常，函数的返回结果是什么？</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Oops!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 会发生什么？</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong> 虽然 try 块中有 return 1，但 finally 块中抛出的异常会打断正常的执行流程，函数不会返回 1，而是直接抛出异常 Error: Oops!。</p><h3 id="问题三-如果-try-块抛出异常-而-finally-块返回-value-函数的返回结果是什么" tabindex="-1"><a class="header-anchor" href="#问题三-如果-try-块抛出异常-而-finally-块返回-value-函数的返回结果是什么"><span>问题三：如果 try 块抛出异常，而 finally 块返回 &quot;value&quot;，函数的返回结果是什么？</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Oops!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;value&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 输出是什么？</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong> 即使 try 块抛出了异常，finally 块中的 return 依然会覆盖异常，函数最终会返回 &quot;value&quot;。finally 块中的 return 总是优先级最高的，它会覆盖之前所有的 return 或异常。</p><h3 id="四、如何掌控-javascript-语句的执行流程" tabindex="-1"><a class="header-anchor" href="#四、如何掌控-javascript-语句的执行流程"><span>四、如何掌控 JavaScript 语句的执行流程？</span></a></h3><blockquote><p>理解 JavaScript 的语句执行机制对于调试复杂代码至关重要。以下是几条实用的建议，帮助你更好地掌控代码执行流程：</p></blockquote><ul><li><strong>利用 try-catch-finally 的特性：</strong> finally 块的代码总是会执行，因此可以在这里确保资源释放或清理操作，同时要谨慎使用 return，以免覆盖 try 块中的返回值。</li><li><strong>关注 Chrome 控制台的返回值：</strong> 在开发调试时，留意 Chrome 控制台显示的返回值，它会显示当前语句的 [[value]]，帮助你快速判断代码的执行情况。</li><li><strong>使用标签和跳转语句：</strong> 在复杂循环和嵌套代码中，合理使用 break 和 continue，并搭配 [[target]] 来控制程序流向。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>JavaScript 的语句执行机制通过 Completion Record 实现灵活的控制流程。掌握它的细节，不仅能帮你解决疑难 bug，还能让你写出更高效、更稳健的代码。下次编写代码时，记得时刻留意这些隐藏的机制，它们可能是解决问题的关键！</p><p>如果你觉得本文有帮助，欢迎点赞、收藏、分享！🚀</p>`,29)]))}const h=s(l,[["render",t],["__file","js-completion-record.html.vue"]]),k=JSON.parse('{"path":"/code/fe/js-completion-record.html","title":"搞懂 JavaScript 语句执行的神秘机制，让你彻底告别调试迷茫！","lang":"zh-CN","frontmatter":{"title":"搞懂 JavaScript 语句执行的神秘机制，让你彻底告别调试迷茫！","shortTitle":"搞懂 JS 语句执行的神秘机制","icon":"c","date":"2024-09-24T20:34:32.000Z","category":["前端","js"],"tag":["js"],"order":70,"description":"JavaScript 的语句执行机制背后隐藏着一些复杂的规则，了解这些机制不仅能帮助你更好地调试代码，还能让你深入理解引擎的工作方式。在这篇文章中，我们将详细揭开 JavaScript 语句执行的神秘面纱，带你彻底搞懂其中的执行逻辑。 一、什么是 Completion Record？ 当 JavaScript 引擎执行每一条语句时，都会生成一个Comp...","head":[["meta",{"property":"og:url","content":"https://www.takeseem.com/code/fe/js-completion-record.html"}],["meta",{"property":"og:site_name","content":"全球指数"}],["meta",{"property":"og:title","content":"搞懂 JavaScript 语句执行的神秘机制，让你彻底告别调试迷茫！"}],["meta",{"property":"og:description","content":"JavaScript 的语句执行机制背后隐藏着一些复杂的规则，了解这些机制不仅能帮助你更好地调试代码，还能让你深入理解引擎的工作方式。在这篇文章中，我们将详细揭开 JavaScript 语句执行的神秘面纱，带你彻底搞懂其中的执行逻辑。 一、什么是 Completion Record？ 当 JavaScript 引擎执行每一条语句时，都会生成一个Comp..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-05T02:09:58.000Z"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:published_time","content":"2024-09-24T20:34:32.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-05T02:09:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"搞懂 JavaScript 语句执行的神秘机制，让你彻底告别调试迷茫！\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-09-24T20:34:32.000Z\\",\\"dateModified\\":\\"2024-11-05T02:09:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全球指数\\",\\"url\\":\\"https://www.takeseem.com\\"}]}"]]},"headers":[{"level":2,"title":"一、什么是 Completion Record？","slug":"一、什么是-completion-record","link":"#一、什么是-completion-record","children":[]},{"level":2,"title":"二、Completion Record 如何影响代码执行？","slug":"二、completion-record-如何影响代码执行","link":"#二、completion-record-如何影响代码执行","children":[]},{"level":2,"title":"三、函数中的奇妙场景","slug":"三、函数中的奇妙场景","link":"#三、函数中的奇妙场景","children":[{"level":3,"title":"问题一：如果 try 块正常执行 return 1，finally 块中执行 return 2，那么函数返回的值是什么？","slug":"问题一-如果-try-块正常执行-return-1-finally-块中执行-return-2-那么函数返回的值是什么","link":"#问题一-如果-try-块正常执行-return-1-finally-块中执行-return-2-那么函数返回的值是什么","children":[]},{"level":3,"title":"问题二：如果 finally 块中抛出异常，函数的返回结果是什么？","slug":"问题二-如果-finally-块中抛出异常-函数的返回结果是什么","link":"#问题二-如果-finally-块中抛出异常-函数的返回结果是什么","children":[]},{"level":3,"title":"问题三：如果 try 块抛出异常，而 finally 块返回 \\"value\\"，函数的返回结果是什么？","slug":"问题三-如果-try-块抛出异常-而-finally-块返回-value-函数的返回结果是什么","link":"#问题三-如果-try-块抛出异常-而-finally-块返回-value-函数的返回结果是什么","children":[]},{"level":3,"title":"四、如何掌控 JavaScript 语句的执行流程？","slug":"四、如何掌控-javascript-语句的执行流程","link":"#四、如何掌控-javascript-语句的执行流程","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1730772598000,"updatedTime":1730772598000,"contributors":[{"name":"takeseem","email":"takeseem@gmail.com","commits":1}]},"readingTime":{"minutes":4.17,"words":1250},"filePathRelative":"code/fe/js-completion-record.md","localizedDate":"2024年9月24日","excerpt":"<p>JavaScript 的语句执行机制背后隐藏着一些复杂的规则，了解这些机制不仅能帮助你更好地调试代码，还能让你深入理解引擎的工作方式。在这篇文章中，我们将详细揭开 JavaScript 语句执行的神秘面纱，带你彻底搞懂其中的执行逻辑。</p>\\n<h2>一、什么是 Completion Record？</h2>\\n<p>当 JavaScript 引擎执行每一条语句时，都会生成一个Completion Record，这个记录类似于一份“执行报告”，告诉引擎语句执行的结果，以便决定下一步的动作。Completion Record 包含三个主要属性：</p>\\n<ol>\\n<li>[[type]]：执行结果的类型</li>\\n</ol>","autoDesc":true}');export{h as comp,k as data};
