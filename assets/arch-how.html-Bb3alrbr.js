import{_ as t,c as l,a as i,o as a}from"./app-Dz1jDlwy.js";const n={};function r(o,e){return a(),l("div",null,e[0]||(e[0]=[i('<h2 id="架构的最终目的是什么" tabindex="-1"><a class="header-anchor" href="#架构的最终目的是什么"><span>架构的最终目的是什么？</span></a></h2><ul><li>确保产品和功能按时交付上线</li><li>控制产品上线后运行维护成本，支持未来的迭代和演化的可能性</li></ul><h2 id="架构设计的步骤是什么" tabindex="-1"><a class="header-anchor" href="#架构设计的步骤是什么"><span>架构设计的步骤是什么？</span></a></h2><ol><li>理解需求定义系统边界 <ul><li>理解需求：确定功能要求，根据业务确定 性能要求。</li><li>定义系统边界：明确哪些要做，哪些不做。</li></ul></li><li>调研类似的系统：参考成熟的方案，让你的架构方案更好。</li><li>顶层架构设计：系统的主要组件或服务、交互方式，系统架构粗略图 和 核心需求流程图 <ul><li>系统架构粗略图、DevOps、技术选型</li><li>核心需求流程图</li><li>安全性设计</li></ul></li><li>迭代扩展性设计 <ul><li>系统的主要矛盾在哪里？怎样解决？不要把一个1年后或几年后的困难拿到现在来解决</li><li>分而治之、先解决主要矛盾、再解决其他边角问题、逐步完善架构设计，同时验证系统是否具有迭代和演化能力</li><li>期间可能会甚至推翻需求或更改产品功能，最终的设计必然是产品和研发各种碰撞后的产物。</li></ul></li></ol><h2 id="架构设计检查清单" tabindex="-1"><a class="header-anchor" href="#架构设计检查清单"><span>架构设计检查清单</span></a></h2><ul><li>开发和部署的技术细节、系统的容错性和灾备能力，日志、监控、告警、自动化运维、系统的自动化部署和恢复</li><li>高可用可靠性、可扩展性，安全性，高并发、数据量激增、响应速度、吞吐量、延迟</li><li>技术债务、平衡性能与复杂度：避免过度优化和设计（简洁、高效的架构能提高开发和维护的效率，减少不必要的开发和运维成本）</li></ul>',6)]))}const c=t(n,[["render",r],["__file","arch-how.html.vue"]]),m=JSON.parse('{"path":"/arch-design/arch-how.html","title":"怎样做架构设计？","lang":"zh-CN","frontmatter":{"title":"怎样做架构设计？","icon":"pencil","cover":"/assets/images/arch-how.jpg","date":"2024-11-07T10:59:57.000Z","category":["架构"],"tag":["架构"],"order":10,"star":true,"description":"架构的最终目的是什么？ 确保产品和功能按时交付上线 控制产品上线后运行维护成本，支持未来的迭代和演化的可能性 架构设计的步骤是什么？ 理解需求定义系统边界 理解需求：确定功能要求，根据业务确定 性能要求。 定义系统边界：明确哪些要做，哪些不做。 调研类似的系统：参考成熟的方案，让你的架构方案更好。 顶层架构设计：系统的主要组件或服务、交互方式，系统架构...","head":[["meta",{"property":"og:url","content":"https://www.takeseem.com/arch-design/arch-how.html"}],["meta",{"property":"og:site_name","content":"全球指数"}],["meta",{"property":"og:title","content":"怎样做架构设计？"}],["meta",{"property":"og:description","content":"架构的最终目的是什么？ 确保产品和功能按时交付上线 控制产品上线后运行维护成本，支持未来的迭代和演化的可能性 架构设计的步骤是什么？ 理解需求定义系统边界 理解需求：确定功能要求，根据业务确定 性能要求。 定义系统边界：明确哪些要做，哪些不做。 调研类似的系统：参考成熟的方案，让你的架构方案更好。 顶层架构设计：系统的主要组件或服务、交互方式，系统架构..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.takeseem.com/assets/images/arch-how.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-07T08:22:36.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://www.takeseem.com/assets/images/arch-how.jpg"}],["meta",{"name":"twitter:image:alt","content":"怎样做架构设计？"}],["meta",{"property":"article:tag","content":"架构"}],["meta",{"property":"article:published_time","content":"2024-11-07T10:59:57.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-07T08:22:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"怎样做架构设计？\\",\\"image\\":[\\"https://www.takeseem.com/assets/images/arch-how.jpg\\"],\\"datePublished\\":\\"2024-11-07T10:59:57.000Z\\",\\"dateModified\\":\\"2024-11-07T08:22:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"全球指数\\",\\"url\\":\\"https://www.takeseem.com\\"}]}"]]},"headers":[{"level":2,"title":"架构的最终目的是什么？","slug":"架构的最终目的是什么","link":"#架构的最终目的是什么","children":[]},{"level":2,"title":"架构设计的步骤是什么？","slug":"架构设计的步骤是什么","link":"#架构设计的步骤是什么","children":[]},{"level":2,"title":"架构设计检查清单","slug":"架构设计检查清单","link":"#架构设计检查清单","children":[]}],"git":{"createdTime":1730949892000,"updatedTime":1730967756000,"contributors":[{"name":"takeseem","email":"takeseem@gmail.com","commits":3}]},"readingTime":{"minutes":1.61,"words":482},"filePathRelative":"arch-design/arch-how.md","localizedDate":"2024年11月7日","excerpt":"<h2>架构的最终目的是什么？</h2>\\n<ul>\\n<li>确保产品和功能按时交付上线</li>\\n<li>控制产品上线后运行维护成本，支持未来的迭代和演化的可能性</li>\\n</ul>\\n<h2>架构设计的步骤是什么？</h2>\\n<ol>\\n<li>理解需求定义系统边界\\n<ul>\\n<li>理解需求：确定功能要求，根据业务确定 性能要求。</li>\\n<li>定义系统边界：明确哪些要做，哪些不做。</li>\\n</ul>\\n</li>\\n<li>调研类似的系统：参考成熟的方案，让你的架构方案更好。</li>\\n<li>顶层架构设计：系统的主要组件或服务、交互方式，系统架构粗略图 和 核心需求流程图\\n<ul>\\n<li>系统架构粗略图、DevOps、技术选型</li>\\n<li>核心需求流程图</li>\\n<li>安全性设计</li>\\n</ul>\\n</li>\\n<li>迭代扩展性设计\\n<ul>\\n<li>系统的主要矛盾在哪里？怎样解决？不要把一个1年后或几年后的困难拿到现在来解决</li>\\n<li>分而治之、先解决主要矛盾、再解决其他边角问题、逐步完善架构设计，同时验证系统是否具有迭代和演化能力</li>\\n<li>期间可能会甚至推翻需求或更改产品功能，最终的设计必然是产品和研发各种碰撞后的产物。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{c as comp,m as data};
